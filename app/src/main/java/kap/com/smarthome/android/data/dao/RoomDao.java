package kap.com.smarthome.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kap.com.smarthome.android.data.bean.Room;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROOM".
*/
public class RoomDao extends AbstractDao<Room, Long> {

    public static final String TABLENAME = "ROOM";

    /**
     * Properties of entity Room.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property GUID = new Property(1, String.class, "GUID", false, "GUID");
        public final static Property NAME = new Property(2, String.class, "NAME", false, "NAME");
        public final static Property ROOM_ORDER = new Property(3, int.class, "ROOM_ORDER", false, "ROOM__ORDER");
        public final static Property TYPE = new Property(4, int.class, "TYPE", false, "TYPE");
    }


    public RoomDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"GUID\" TEXT," + // 1: GUID
                "\"NAME\" TEXT," + // 2: NAME
                "\"ROOM__ORDER\" INTEGER NOT NULL ," + // 3: ROOM_ORDER
                "\"TYPE\" INTEGER NOT NULL );"); // 4: TYPE
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ROOM_GUID ON \"ROOM\"" +
                " (\"GUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
        stmt.bindLong(4, entity.getROOM_ORDER());
        stmt.bindLong(5, entity.getTYPE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
        stmt.bindLong(4, entity.getROOM_ORDER());
        stmt.bindLong(5, entity.getTYPE());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Room readEntity(Cursor cursor, int offset) {
        Room entity = new Room( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NAME
            cursor.getInt(offset + 3), // ROOM_ORDER
            cursor.getInt(offset + 4) // TYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Room entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setROOM_ORDER(cursor.getInt(offset + 3));
        entity.setTYPE(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Room entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Room entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Room entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
