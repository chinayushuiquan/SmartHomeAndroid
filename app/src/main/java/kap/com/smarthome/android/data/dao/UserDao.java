package kap.com.smarthome.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kap.com.smarthome.android.data.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property GUID = new Property(1, String.class, "GUID", false, "GUID");
        public final static Property LOGIN_NAME = new Property(2, String.class, "LOGIN_NAME", false, "LOGIN__NAME");
        public final static Property PHONE = new Property(3, String.class, "PHONE", false, "PHONE");
        public final static Property EMAIL = new Property(4, String.class, "EMAIL", false, "EMAIL");
        public final static Property WECHAT = new Property(5, String.class, "WECHAT", false, "WECHAT");
        public final static Property QQ = new Property(6, String.class, "QQ", false, "QQ");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property USER_ID = new Property(8, String.class, "USER_ID", false, "USER__ID");
        public final static Property USER_HEAD = new Property(9, String.class, "USER_HEAD", false, "USER__HEAD");
        public final static Property NICK_NAME = new Property(10, String.class, "NICK_NAME", false, "NICK__NAME");
        public final static Property SESSION_ID = new Property(11, String.class, "SESSION_ID", false, "SESSION__ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"GUID\" TEXT," + // 1: GUID
                "\"LOGIN__NAME\" TEXT," + // 2: LOGIN_NAME
                "\"PHONE\" TEXT," + // 3: PHONE
                "\"EMAIL\" TEXT," + // 4: EMAIL
                "\"WECHAT\" TEXT," + // 5: WECHAT
                "\"QQ\" TEXT," + // 6: QQ
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"USER__ID\" TEXT," + // 8: USER_ID
                "\"USER__HEAD\" TEXT," + // 9: USER_HEAD
                "\"NICK__NAME\" TEXT," + // 10: NICK_NAME
                "\"SESSION__ID\" TEXT);"); // 11: SESSION_ID
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_GUID ON \"USER\"" +
                " (\"GUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String LOGIN_NAME = entity.getLOGIN_NAME();
        if (LOGIN_NAME != null) {
            stmt.bindString(3, LOGIN_NAME);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(4, PHONE);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(5, EMAIL);
        }
 
        String WECHAT = entity.getWECHAT();
        if (WECHAT != null) {
            stmt.bindString(6, WECHAT);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(7, QQ);
        }
        stmt.bindLong(8, entity.getStatus());
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(9, USER_ID);
        }
 
        String USER_HEAD = entity.getUSER_HEAD();
        if (USER_HEAD != null) {
            stmt.bindString(10, USER_HEAD);
        }
 
        String NICK_NAME = entity.getNICK_NAME();
        if (NICK_NAME != null) {
            stmt.bindString(11, NICK_NAME);
        }
 
        String SESSION_ID = entity.getSESSION_ID();
        if (SESSION_ID != null) {
            stmt.bindString(12, SESSION_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String LOGIN_NAME = entity.getLOGIN_NAME();
        if (LOGIN_NAME != null) {
            stmt.bindString(3, LOGIN_NAME);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(4, PHONE);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(5, EMAIL);
        }
 
        String WECHAT = entity.getWECHAT();
        if (WECHAT != null) {
            stmt.bindString(6, WECHAT);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(7, QQ);
        }
        stmt.bindLong(8, entity.getStatus());
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(9, USER_ID);
        }
 
        String USER_HEAD = entity.getUSER_HEAD();
        if (USER_HEAD != null) {
            stmt.bindString(10, USER_HEAD);
        }
 
        String NICK_NAME = entity.getNICK_NAME();
        if (NICK_NAME != null) {
            stmt.bindString(11, NICK_NAME);
        }
 
        String SESSION_ID = entity.getSESSION_ID();
        if (SESSION_ID != null) {
            stmt.bindString(12, SESSION_ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LOGIN_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PHONE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EMAIL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // WECHAT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QQ
            cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // USER_ID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // USER_HEAD
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // NICK_NAME
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // SESSION_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLOGIN_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPHONE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEMAIL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWECHAT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQQ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setUSER_ID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUSER_HEAD(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNICK_NAME(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSESSION_ID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
