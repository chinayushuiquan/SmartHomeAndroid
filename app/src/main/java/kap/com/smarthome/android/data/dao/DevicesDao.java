package kap.com.smarthome.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kap.com.smarthome.android.data.bean.Devices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICES".
*/
public class DevicesDao extends AbstractDao<Devices, Long> {

    public static final String TABLENAME = "DEVICES";

    /**
     * Properties of entity Devices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property GUID = new Property(1, String.class, "GUID", false, "GUID");
        public final static Property ROOM_GUID = new Property(2, String.class, "ROOM_GUID", false, "ROOM__GUID");
        public final static Property DEVICE_ID = new Property(3, String.class, "DEVICE_ID", false, "DEVICE__ID");
        public final static Property RELAY_ID = new Property(4, String.class, "RELAY_ID", false, "RELAY__ID");
        public final static Property TYPE = new Property(5, int.class, "TYPE", false, "TYPE");
        public final static Property SUB_TYPE = new Property(6, int.class, "SUB_TYPE", false, "SUB__TYPE");
        public final static Property VALUE = new Property(7, String.class, "VALUE", false, "VALUE");
        public final static Property NAME = new Property(8, String.class, "NAME", false, "NAME");
        public final static Property DEVICE_ORDER = new Property(9, int.class, "DEVICE_ORDER", false, "DEVICE__ORDER");
        public final static Property USE_FREQUENCY = new Property(10, int.class, "USE_FREQUENCY", false, "USE__FREQUENCY");
    }


    public DevicesDao(DaoConfig config) {
        super(config);
    }
    
    public DevicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"GUID\" TEXT NOT NULL ," + // 1: GUID
                "\"ROOM__GUID\" TEXT," + // 2: ROOM_GUID
                "\"DEVICE__ID\" TEXT NOT NULL ," + // 3: DEVICE_ID
                "\"RELAY__ID\" TEXT NOT NULL ," + // 4: RELAY_ID
                "\"TYPE\" INTEGER NOT NULL ," + // 5: TYPE
                "\"SUB__TYPE\" INTEGER NOT NULL ," + // 6: SUB_TYPE
                "\"VALUE\" TEXT," + // 7: VALUE
                "\"NAME\" TEXT NOT NULL ," + // 8: NAME
                "\"DEVICE__ORDER\" INTEGER NOT NULL ," + // 9: DEVICE_ORDER
                "\"USE__FREQUENCY\" INTEGER NOT NULL );"); // 10: USE_FREQUENCY
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEVICES_GUID ON \"DEVICES\"" +
                " (\"GUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Devices entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getGUID());
 
        String ROOM_GUID = entity.getROOM_GUID();
        if (ROOM_GUID != null) {
            stmt.bindString(3, ROOM_GUID);
        }
        stmt.bindString(4, entity.getDEVICE_ID());
        stmt.bindString(5, entity.getRELAY_ID());
        stmt.bindLong(6, entity.getTYPE());
        stmt.bindLong(7, entity.getSUB_TYPE());
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(8, VALUE);
        }
        stmt.bindString(9, entity.getNAME());
        stmt.bindLong(10, entity.getDEVICE_ORDER());
        stmt.bindLong(11, entity.getUSE_FREQUENCY());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Devices entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getGUID());
 
        String ROOM_GUID = entity.getROOM_GUID();
        if (ROOM_GUID != null) {
            stmt.bindString(3, ROOM_GUID);
        }
        stmt.bindString(4, entity.getDEVICE_ID());
        stmt.bindString(5, entity.getRELAY_ID());
        stmt.bindLong(6, entity.getTYPE());
        stmt.bindLong(7, entity.getSUB_TYPE());
 
        String VALUE = entity.getVALUE();
        if (VALUE != null) {
            stmt.bindString(8, VALUE);
        }
        stmt.bindString(9, entity.getNAME());
        stmt.bindLong(10, entity.getDEVICE_ORDER());
        stmt.bindLong(11, entity.getUSE_FREQUENCY());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Devices readEntity(Cursor cursor, int offset) {
        Devices entity = new Devices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getString(offset + 1), // GUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ROOM_GUID
            cursor.getString(offset + 3), // DEVICE_ID
            cursor.getString(offset + 4), // RELAY_ID
            cursor.getInt(offset + 5), // TYPE
            cursor.getInt(offset + 6), // SUB_TYPE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // VALUE
            cursor.getString(offset + 8), // NAME
            cursor.getInt(offset + 9), // DEVICE_ORDER
            cursor.getInt(offset + 10) // USE_FREQUENCY
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Devices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGUID(cursor.getString(offset + 1));
        entity.setROOM_GUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDEVICE_ID(cursor.getString(offset + 3));
        entity.setRELAY_ID(cursor.getString(offset + 4));
        entity.setTYPE(cursor.getInt(offset + 5));
        entity.setSUB_TYPE(cursor.getInt(offset + 6));
        entity.setVALUE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNAME(cursor.getString(offset + 8));
        entity.setDEVICE_ORDER(cursor.getInt(offset + 9));
        entity.setUSE_FREQUENCY(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Devices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Devices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Devices entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
