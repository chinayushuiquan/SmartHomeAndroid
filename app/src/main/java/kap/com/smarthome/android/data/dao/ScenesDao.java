package kap.com.smarthome.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kap.com.smarthome.android.data.bean.Scenes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENES".
*/
public class ScenesDao extends AbstractDao<Scenes, Long> {

    public static final String TABLENAME = "SCENES";

    /**
     * Properties of entity Scenes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property GUID = new Property(1, String.class, "GUID", false, "GUID");
        public final static Property SCENE_ID = new Property(2, String.class, "SCENE_ID", false, "SCENE__ID");
        public final static Property SCENE_NAME = new Property(3, String.class, "SCENE_NAME", false, "SCENE__NAME");
        public final static Property SCENE_ICON = new Property(4, int.class, "SCENE_ICON", false, "SCENE__ICON");
        public final static Property USER_ID = new Property(5, String.class, "USER_ID", false, "USER__ID");
        public final static Property DEVICE_NUMBER = new Property(6, String.class, "DEVICE_NUMBER", false, "DEVICE__NUMBER");
        public final static Property TRIGGER_NUMBER = new Property(7, String.class, "TRIGGER_NUMBER", false, "TRIGGER__NUMBER");
        public final static Property TRIGGER_STATUS = new Property(8, int.class, "TRIGGER_STATUS", false, "TRIGGER__STATUS");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
    }


    public ScenesDao(DaoConfig config) {
        super(config);
    }
    
    public ScenesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"GUID\" TEXT," + // 1: GUID
                "\"SCENE__ID\" TEXT," + // 2: SCENE_ID
                "\"SCENE__NAME\" TEXT," + // 3: SCENE_NAME
                "\"SCENE__ICON\" INTEGER NOT NULL ," + // 4: SCENE_ICON
                "\"USER__ID\" TEXT," + // 5: USER_ID
                "\"DEVICE__NUMBER\" TEXT," + // 6: DEVICE_NUMBER
                "\"TRIGGER__NUMBER\" TEXT," + // 7: TRIGGER_NUMBER
                "\"TRIGGER__STATUS\" INTEGER NOT NULL ," + // 8: TRIGGER_STATUS
                "\"TYPE\" INTEGER NOT NULL );"); // 9: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SCENES_GUID ON \"SCENES\"" +
                " (\"GUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Scenes entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String SCENE_ID = entity.getSCENE_ID();
        if (SCENE_ID != null) {
            stmt.bindString(3, SCENE_ID);
        }
 
        String SCENE_NAME = entity.getSCENE_NAME();
        if (SCENE_NAME != null) {
            stmt.bindString(4, SCENE_NAME);
        }
        stmt.bindLong(5, entity.getSCENE_ICON());
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(6, USER_ID);
        }
 
        String DEVICE_NUMBER = entity.getDEVICE_NUMBER();
        if (DEVICE_NUMBER != null) {
            stmt.bindString(7, DEVICE_NUMBER);
        }
 
        String TRIGGER_NUMBER = entity.getTRIGGER_NUMBER();
        if (TRIGGER_NUMBER != null) {
            stmt.bindString(8, TRIGGER_NUMBER);
        }
        stmt.bindLong(9, entity.getTRIGGER_STATUS());
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Scenes entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String SCENE_ID = entity.getSCENE_ID();
        if (SCENE_ID != null) {
            stmt.bindString(3, SCENE_ID);
        }
 
        String SCENE_NAME = entity.getSCENE_NAME();
        if (SCENE_NAME != null) {
            stmt.bindString(4, SCENE_NAME);
        }
        stmt.bindLong(5, entity.getSCENE_ICON());
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(6, USER_ID);
        }
 
        String DEVICE_NUMBER = entity.getDEVICE_NUMBER();
        if (DEVICE_NUMBER != null) {
            stmt.bindString(7, DEVICE_NUMBER);
        }
 
        String TRIGGER_NUMBER = entity.getTRIGGER_NUMBER();
        if (TRIGGER_NUMBER != null) {
            stmt.bindString(8, TRIGGER_NUMBER);
        }
        stmt.bindLong(9, entity.getTRIGGER_STATUS());
        stmt.bindLong(10, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Scenes readEntity(Cursor cursor, int offset) {
        Scenes entity = new Scenes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SCENE_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SCENE_NAME
            cursor.getInt(offset + 4), // SCENE_ICON
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // USER_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DEVICE_NUMBER
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TRIGGER_NUMBER
            cursor.getInt(offset + 8), // TRIGGER_STATUS
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Scenes entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSCENE_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSCENE_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSCENE_ICON(cursor.getInt(offset + 4));
        entity.setUSER_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDEVICE_NUMBER(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTRIGGER_NUMBER(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTRIGGER_STATUS(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Scenes entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Scenes entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Scenes entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
