package kap.com.smarthome.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import kap.com.smarthome.android.data.bean.IRKey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IRKEY".
*/
public class IRKeyDao extends AbstractDao<IRKey, Long> {

    public static final String TABLENAME = "IRKEY";

    /**
     * Properties of entity IRKey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property GUID = new Property(1, String.class, "GUID", false, "GUID");
        public final static Property DEVICE_ID = new Property(2, String.class, "DEVICE_ID", false, "DEVICE__ID");
        public final static Property INDEX = new Property(3, int.class, "INDEX", false, "INDEX");
        public final static Property KEY1 = new Property(4, String.class, "KEY1", false, "KEY1");
        public final static Property KEY2 = new Property(5, String.class, "KEY2", false, "KEY2");
        public final static Property BUTTON_NAME = new Property(6, String.class, "BUTTON_NAME", false, "BUTTON__NAME");
        public final static Property USER_ID = new Property(7, String.class, "USER_ID", false, "USER__ID");
    }


    public IRKeyDao(DaoConfig config) {
        super(config);
    }
    
    public IRKeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IRKEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"GUID\" TEXT," + // 1: GUID
                "\"DEVICE__ID\" TEXT," + // 2: DEVICE_ID
                "\"INDEX\" INTEGER NOT NULL ," + // 3: INDEX
                "\"KEY1\" TEXT," + // 4: KEY1
                "\"KEY2\" TEXT," + // 5: KEY2
                "\"BUTTON__NAME\" TEXT," + // 6: BUTTON_NAME
                "\"USER__ID\" TEXT);"); // 7: USER_ID
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_IRKEY_GUID ON \"IRKEY\"" +
                " (\"GUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IRKEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IRKey entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String DEVICE_ID = entity.getDEVICE_ID();
        if (DEVICE_ID != null) {
            stmt.bindString(3, DEVICE_ID);
        }
        stmt.bindLong(4, entity.getINDEX());
 
        String KEY1 = entity.getKEY1();
        if (KEY1 != null) {
            stmt.bindString(5, KEY1);
        }
 
        String KEY2 = entity.getKEY2();
        if (KEY2 != null) {
            stmt.bindString(6, KEY2);
        }
 
        String BUTTON_NAME = entity.getBUTTON_NAME();
        if (BUTTON_NAME != null) {
            stmt.bindString(7, BUTTON_NAME);
        }
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(8, USER_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IRKey entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(2, GUID);
        }
 
        String DEVICE_ID = entity.getDEVICE_ID();
        if (DEVICE_ID != null) {
            stmt.bindString(3, DEVICE_ID);
        }
        stmt.bindLong(4, entity.getINDEX());
 
        String KEY1 = entity.getKEY1();
        if (KEY1 != null) {
            stmt.bindString(5, KEY1);
        }
 
        String KEY2 = entity.getKEY2();
        if (KEY2 != null) {
            stmt.bindString(6, KEY2);
        }
 
        String BUTTON_NAME = entity.getBUTTON_NAME();
        if (BUTTON_NAME != null) {
            stmt.bindString(7, BUTTON_NAME);
        }
 
        String USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindString(8, USER_ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IRKey readEntity(Cursor cursor, int offset) {
        IRKey entity = new IRKey( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DEVICE_ID
            cursor.getInt(offset + 3), // INDEX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // KEY1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // KEY2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BUTTON_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // USER_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IRKey entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDEVICE_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setINDEX(cursor.getInt(offset + 3));
        entity.setKEY1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKEY2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBUTTON_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUSER_ID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IRKey entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IRKey entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IRKey entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
